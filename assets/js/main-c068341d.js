/**
 * sessions - Record with session musicians all over the world!
 * @version v1.1.0
 * @link 
 * @license MIT
 */
!function(){"use strict";function Route($stateProvider,$urlRouterProvider,$logProvider,$httpProvider){$urlRouterProvider.otherwise("/home"),$logProvider.debugEnabled(!0),$httpProvider.interceptors.push("httpInterceptor"),$stateProvider.state("root",{views:{header:{templateUrl:"src/common/header.tpl.html",controller:"HeaderCtrl as HeaderCtrl"},footer:{templateUrl:"src/common/footer.tpl.html",controller:"FooterCtrl as FooterCtrl"}}})}function MainCtrl($log,userApi){var vm=this;vm.loaded="MainCtrl loaded",$log.debug(vm.loaded)}function run($log,$location,$rootScope){$log.debug("App is running"),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$log.debug("authenticated user")}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){error.authenticated===!1&&($log.debug("unauthenticated user"),$location.path("/"))})}angular.element(document).ready(function(){angular.bootstrap(document.documentElement,["app"])}),Route.$inject=["$stateProvider","$urlRouterProvider","$logProvider","$httpProvider"],MainCtrl.$inject=["$log","userApi"],run.$inject=["$log","$location","$rootScope"],angular.module("app",["ui.router","ngCookies","home.module","login.module","signup.module","profile.module","posts.module","post-detail.module","new-post.module","other-users-profiles.module","follows.module","homepage.module","messages.module","message-detail.module","common.header","common.footer","common.services.data","common.services.api","common.directives.version","common.directives.followers","common.directives.post","common.directives.ngEnter","common.filters.uppercase","common.filters.truncate","common.interceptors.http","templates"]).config(Route).run(run).controller("MainCtrl",MainCtrl).value("version","1.1.0")}(),function(){"use strict";function Route($stateProvider){$stateProvider.state("root.home",{url:"/",views:{"@":{templateUrl:"src/app/home/home.tpl.html",controller:"HomeCtrl as vm",resolve:{data:["DataService",function(DataService){return DataService.get()}]}}}})}function HomeCtrl(data){var vm=this;vm.data=data.data}angular.module("home.module",["signup.module","login.module"]).config(Route).controller("HomeCtrl",HomeCtrl),Route.$inject=["$stateProvider"],HomeCtrl.$inject=["data"]}(),function(){"use strict";angular.module("login.module",["ngCookies","common.services.api"])}(),function(){"use strict";function LoginCtrl($log,userApi,$location,$window){$log.debug("loginCtrl Loaded");var vm=this;vm.logIn=function(username,password){return userApi.isLoggedIn()?(vm.errorMessage="You are already logged in!",void $log.debug(vm.errorMessage)):(vm.errorMessage="",void userApi.logIn(username,password).then(function(userProfile){console.log(userProfile),vm.userId=userProfile.objectId,vm.sessionToken=userProfile.sessionToken,$log.debug("loginCtrl login success"),$window.location.reload(),$location.path("/home")},function(error){$log.debug("loginCtrl login failed"),vm.errorMessage=error.message}))},vm.logOut=function(){userApi.isLoggedIn()?(vm.errorMessage="",userApi.logOut().then(function(response){$log.debug("loginCtrl logout success")},function(error){$log.debug("loginCtrl logout failed"),vm.errorMessage=error.message})):vm.errorMessage="No user logged in!"}}angular.module("login.module").controller("LoginCtrl",LoginCtrl),LoginCtrl.$inject=["$log","userApi","$location","$window"]}(),function(){"use strict";angular.module("signup.module",["common.services.api"])}(),function(){"use strict";function SignupCtrl($log,userApi,$location,$window){$log.debug("signupCtrl Loaded!");var vm=this;vm.signup={},vm.signUp=function(username,password,email){vm.errorMessage="",vm.signup.password===vm.signup.confirmPassword?userApi.signUp(username,password,email).then(function(userProfile){console.log(userProfile),$log.debug("signupCtrl signup success"),$window.location.reload(),$location.path("/user/"+userProfile.objectId)},function(error){$log.debug("SignupCtrl signup failed"),vm.errorMessage=error.message}):($log.debug("Passwords do not match"),vm.errorMessage="passwords do not match")},vm.isUser=function(username){vm.errorMessage="",userApi.isUser(username).then(function(user){$log.debug("isUser signup success")},function(error){$log.debug("isUser signup failed"),vm.errorMessage=error.message})}}angular.module("signup.module").controller("SignupCtrl",SignupCtrl),SignupCtrl.$inject=["$log","userApi","$location","$window"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.profile",{url:"/profile",views:{"@":{templateUrl:"src/app/user-profile/profile.tpl.html",controller:"profileCtrl as profileCtrl"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("profile.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function profileCtrl($scope,$stateParams,parseApi,userApi,$log){var vm=this;userApi.currentUser().then(function(result){vm.username=result.username,vm.id=result.objectId,vm.picture=result.picture?result.picture.url:"assets/images/unknown.gif",parseApi.getFollowing(vm.id).then(function(result){vm.followData=result.data.results,vm.followingNumber=vm.followData.length},function(error){$log.debug(error),vm.errorMessage=error.message}),parseApi.getFollowers(vm.id).then(function(result){vm.followerData=result.data.results,vm.followerNumber=vm.followerData.length},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message})},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),$scope.uploadFile=function(files){parseApi.uploadFile(files).then(function(response){vm.fileName=response.data.name,vm.fileUrl=response.data.url,userApi.editUser(vm.id,{picture:{__type:"File",name:vm.fileName,url:vm.fileUrl}}).then(function(response){})},function(error){$log.debug(error)})}}angular.module("profile.module").controller("profileCtrl",profileCtrl),profileCtrl.$inject=["$scope","$stateParams","parseApi","userApi","$log"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.posts",{url:"/posts",views:{"@":{templateUrl:"src/app/posts/posts.tpl.html",controller:"postCtrl as vm"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("posts.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function postCtrl($log,userApi,parseApi){$log.debug("postCtrl Loaded!");var vm=this;vm.limit=10,vm.skip=0,vm.numberToArray=function(num){return new Array(num)},vm.jumpToPage=function(pageNumber){vm.skip!==vm.limit*(pageNumber-1)&&(vm.skip=vm.limit*(pageNumber-1),vm.getAll(vm.limit,vm.skip))},vm.next=function(){vm.skip+vm.limit<vm.count&&(vm.skip+=vm.limit,vm.getAll(vm.limit,vm.skip))},vm.previous=function(){vm.skip>0&&(vm.skip-=vm.limit,vm.getAll(vm.limit,vm.skip))},vm.getAll=function(limit,skip){parseApi.getAll("Posts",limit,skip).then(function(result){vm.count=result.data.count,vm.posts=result.data.results,vm.postList=[],vm.count>vm.limit&&vm.count%vm.limit===0&&(vm.pages=vm.count/vm.limit),vm.count>vm.limit&&vm.count%vm.limit>0&&(vm.modulo=vm.count%vm.limit,vm.pages=(vm.count-vm.modulo)/vm.limit+1),(vm.count<vm.limit||vm.count===vm.limit)&&(vm.pages=1),angular.forEach(result.data.results,function(post){parseApi.getUser(post.user.objectId).then(function(response){vm.user=response.data,vm.pictureStyle={background:"url("+vm.user.picture.url+") no-repeat center center / cover"},vm.postList.push({postTitle:post.title,postContent:post.content,postFile:post.file,postId:post.objectId,createdAt:post.createdAt,username:vm.user.username,userId:vm.user.objectId,userPictureUrl:vm.user.picture.url,commentCount:vm.commentCount})})})})},vm.getAll(vm.limit,vm.skip)}angular.module("posts.module").controller("postCtrl",postCtrl),postCtrl.$inject=["$log","userApi","parseApi"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.post-detail",{url:"/posts/:postId",views:{"@":{templateUrl:"src/app/post-detail/post-detail.tpl.html",controller:"postDetailCtrl as postDetailCtrl"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("post-detail.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function postDetailCtrl($stateParams,parseApi,$log,$sce,$location,$cookies){if(""===$stateParams.postId)$location.path("/home");else{var vm=this;parseApi.get("Posts",$stateParams.postId).then(function(result){vm.data=result.data,result.data.file&&(vm.fullAudioName=result.data.file.name.substr(42),vm.dotIndex=vm.fullAudioName.lastIndexOf("."),vm.shortAudioName=vm.fullAudioName.substr(0,vm.dotIndex),vm.audioUrl=$sce.trustAsResourceUrl(result.data.file.url)),vm.user=result.data.user.objectId,parseApi.get("_User",vm.user).then(function(user){vm.username=user.data.username}),vm.getComments($stateParams.postId)},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),vm.writeComment=function(commentMessage){parseApi.create("PostComments",{post:{__type:"Pointer",className:"Posts",objectId:$stateParams.postId},user:{__type:"Pointer",className:"_User",objectId:$cookies.get("_userId")},comment:commentMessage}).then(function(response){$("#message-text").val(""),vm.getComments($stateParams.postId)})},vm.getComments=function(postId){vm.commentList=[],parseApi.getWherePost(postId).then(function(response){angular.forEach(response.data.results,function(comment){parseApi.getUser(comment.user.objectId).then(function(user){vm.commentUser=user.data,vm.pictureStyle={background:"url("+user.data.picture.url+") no-repeat center center / cover"},vm.commentList.push({commentUser:vm.commentUser,commentContent:comment.comment,createdAt:comment.createdAt})})})})}}}angular.module("post-detail.module").controller("postDetailCtrl",postDetailCtrl),postDetailCtrl.$inject=["$stateParams","parseApi","$log","$sce","$location","$cookies"]}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.other-users-profiles",{url:"/user/:userId",views:{"@":{templateUrl:"src/app/other-users-profiles/other-users-profiles.tpl.html",controller:"otherUserProfileCtrl as vm"}}})}angular.module("other-users-profiles.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function otherUserProfileCtrl($scope,$stateParams,parseApi,userApi,$log,$location,$cookies){var vm=this;vm.limit=10,vm.skip=0,vm.otherUserId=$stateParams.userId,vm.isCurrentUser=!1,vm.editingInstrument=!1,vm.editingBio=!1,""===$stateParams.userId&&$location.path(void 0!==$cookies.get("_userId")||void 0!==$cookies.get("_sessionToken")?"/home":"/"),(void 0!==$cookies.get("_userId")||void 0!==$cookies.get("_sessionToken"))&&userApi.currentUser().then(function(result){vm.userId=result.objectId,result.objectId===$stateParams.userId?vm.isCurrentUser=!0:(vm.isCurrentUser=!1,parseApi.follows(vm.userId,$stateParams.userId).then(function(result){vm.followString="Follow",result.data.results.length>0&&(vm.followString="Unfollow")}))}),vm.message=function(){parseApi.getMessages(vm.userId).then(function(response){angular.forEach(response.data.results,function(messaging){console.log(messaging),(messaging.user1.objectId===$stateParams.userId||messaging.user2.objectId===$stateParams.userId)&&(vm.messaging=messaging.objectId)}),void 0!==vm.messaging?$location.path("/messages/"+vm.messaging):(vm.user1={__type:"Pointer",className:"_User",objectId:vm.userId},vm.user2={__type:"Pointer",className:"_User",objectId:$stateParams.userId},parseApi.create("Messaging",{user1:vm.user1,user2:vm.user2}).then(function(response){$location.path("/messages/"+response.data.objectId)}))})},vm.follow=function(){userApi.currentUser().then(function(result){vm.userId=result.objectId,vm.followId=vm.id,parseApi.follows(vm.userId,vm.followId).then(function(result){$log.debug(result.data.results.length),result.data.results.length>0||vm.userId===vm.followId?($log.debug("Already following this user"),parseApi.remove("Following",result.data.results[0].objectId).then(function(response){vm.followString="Follow"})):parseApi.follow(vm.userId,vm.followId).then(function(success){vm.followString="Unfollow"},function(error){console.log(error.data.error)})})})},parseApi.getUser($stateParams.userId).then(function(result){vm.data=result.data,vm.username=result.data.username,vm.id=result.data.objectId,vm.picture=vm.data.picture?vm.data.picture.url:"assets/images/unknown.gif",vm.bioEditString=void 0===vm.data.bio?"Click here write your bio!":"- edit",vm.instrumentEditString=void 0===vm.data.instrument?"Click here to add your instrument":"- edit",vm.pictureStyle={background:"url("+vm.picture+") no-repeat center center / cover"},vm.getPostsFromUser("Posts",$stateParams.userId,vm.limit,vm.skip)},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),parseApi.getFollowing($stateParams.userId).then(function(result){vm.followData=result.data.results,vm.followingNumber=vm.followData.length},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),parseApi.getFollowers($stateParams.userId).then(function(result){vm.followerData=result.data.results,vm.followerNumber=vm.followerData.length},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),vm.getPostsFromUser=function(className,userId,limit,skip){parseApi.getWhereUser(className,userId,limit,skip).then(function(result){vm.count=result.data.count,vm.posts=result.data.results,vm.postList=[],vm.count>vm.limit&&vm.count%vm.limit===0&&(vm.pages=vm.count/vm.limit),vm.count>vm.limit&&vm.count%vm.limit>0&&(vm.modulo=vm.count%vm.limit,vm.pages=(vm.count-vm.modulo)/vm.limit+1),(vm.count<vm.limit||vm.count===vm.limit)&&(vm.pages=1),angular.forEach(result.data.results,function(post){parseApi.getUser(post.user.objectId).then(function(response){vm.user=response.data,vm.postList.push({postTitle:post.title,postContent:post.content,postFile:post.file,postId:post.objectId,createdAt:post.createdAt,username:vm.user.username,userId:vm.user.objectId,userPictureUrl:vm.user.picture.url})})})})},vm.next=function(){vm.skip+vm.limit<vm.count&&(vm.skip+=vm.limit,vm.getPostsFromUser("Posts",$stateParams.userId,vm.limit,vm.skip))},vm.previous=function(){vm.skip>0&&(vm.skip-=vm.limit,vm.getPostsFromUser("Posts",$stateParams.userId,vm.limit,vm.skip))},vm.numberToArray=function(num){return new Array(num)},vm.jumpToPage=function(pageNumber){vm.skip!==vm.limit*(pageNumber-1)&&(vm.skip=vm.limit*(pageNumber-1),vm.getPostsFromUser("Posts",$stateParams.userId,vm.limit,vm.skip))},$scope.uploadFile=function(files){parseApi.uploadFile(files).then(function(response){vm.fileName=response.data.name,vm.fileUrl=response.data.url,userApi.editUser(vm.id,{picture:{__type:"File",name:vm.fileName,url:vm.fileUrl}}).then(function(response){vm.picture=vm.fileUrl,vm.getPostsFromUser("Posts",$stateParams.userId)})},function(error){$log.debug(error)})},vm.editInstrument=function(){vm.editingInstrument=vm.editingInstrument?!1:!0},vm.editBio=function(){vm.editingBio=vm.editingBio?!1:!0},vm.createNewInstrument=function(newInstrument){userApi.editUser($stateParams.userId,{instrument:newInstrument}).then(function(response){vm.data.instrument=newInstrument,$("#instrument-text").val(""),vm.editingInstrument=!1})},vm.createNewBio=function(newBio){userApi.editUser($stateParams.userId,{bio:newBio}).then(function(response){vm.data.bio=newBio,$("#bio-text").val(""),vm.editingBio=!1})}}angular.module("other-users-profiles.module").controller("otherUserProfileCtrl",otherUserProfileCtrl),otherUserProfileCtrl.$inject=["$scope","$stateParams","parseApi","userApi","$log","$location","$cookies"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.following",{url:"/user/:userId/following",views:{"@":{templateUrl:"src/app/follows/following.tpl.html",controller:"followingCtrl as vm"}},resolve:{auth:authentication}}).state("root.followers",{url:"/user/:userId/followers",views:{"@":{templateUrl:"src/app/follows/followers.tpl.html",controller:"followersCtrl as vm"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("follows.module",["common.services.api","common.directives.followers"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function followingCtrl($scope,$stateParams,parseApi,userApi,$log){var vm=this;parseApi.getUser($stateParams.userId).then(function(result){vm.data=result.data,vm.username=result.data.username,vm.id=result.data.objectId,vm.picture=vm.data.picture?vm.data.picture.url:"assets/images/unknown.gif"},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),parseApi.getFollowing($stateParams.userId).then(function(result){vm.count=result.data.count,vm.followingList=[],angular.forEach(result.data.results,function(following){parseApi.getUser(following.follows.objectId).then(function(user){vm.following=user.data,vm.pictureStyle={background:"url("+vm.following.picture.url+") no-repeat center center / cover"},vm.followingList.push({followingUsername:vm.following.username,followingUserId:vm.following.objectId,followingUserPictureUrl:vm.following.picture.url,followingUserInstrument:vm.following.instrument,followingUserBio:vm.following.bio})})}),vm.followData=result.data.results,vm.followingNumber=vm.followData.length},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message})}angular.module("follows.module").controller("followingCtrl",followingCtrl),followingCtrl.$inject=["$scope","$stateParams","parseApi","userApi","$log"]}(),function(){"use strict";function followersCtrl($scope,$stateParams,parseApi,userApi,$log){var vm=this;parseApi.getUser($stateParams.userId).then(function(result){vm.data=result.data,vm.username=result.data.username,vm.id=result.data.objectId,vm.picture=vm.data.picture?vm.data.picture.url:"assets/images/unknown.gif"},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message}),parseApi.getFollowers($stateParams.userId).then(function(result){vm.count=result.data.count,vm.followerList=[],angular.forEach(result.data.results,function(followers){parseApi.getUser(followers.user.objectId).then(function(user){vm.follower=user.data,vm.pictureStyle={background:"url("+vm.follower.picture.url+") no-repeat center center / cover"},vm.followerList.push({followerUsername:vm.follower.username,followerUserId:vm.follower.objectId,followerUserPictureUrl:vm.follower.picture.url,followerUserInstrument:vm.follower.instrument,followerUserBio:vm.follower.bio})})}),vm.followData=result.data.results,vm.followerNumber=vm.followData.length},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message})}angular.module("follows.module").controller("followersCtrl",followersCtrl),followersCtrl.$inject=["$scope","$stateParams","parseApi","userApi","$log"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.new-post",{url:"/new-post",views:{"@":{templateUrl:"src/app/new-post/new-post.tpl.html",controller:"newPostCtrl as vm"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("new-post.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function newPostCtrl($log,userApi,parseApi,$scope){var vm=this;userApi.currentUser().then(function(response){vm.username=response.username,vm.userId=response.objectId},function(error){console.log(error)}),vm.post=function(userId,username,title,content){vm.userPointer={__type:"Pointer",className:"_User",objectId:userId},vm.username=username,vm.title=title,vm.content=content,vm.file={__type:"File",name:vm.fileName,url:vm.fileUrl},parseApi.create("Posts",{user:vm.userPointer,username:vm.username,title:vm.title,content:vm.content,file:vm.file}).then(function(response){})},vm.uploadFile=function(files){parseApi.uploadFile(files).then(function(response){vm.fileName=response.data.name,vm.fileUrl=response.data.url},function(error){console.log(error)})}}angular.module("new-post.module").controller("newPostCtrl",newPostCtrl),newPostCtrl.$inject=["$log","userApi","parseApi","$scope"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.homepage",{url:"/home",views:{"@":{templateUrl:"src/app/homepage/homepage.tpl.html",controller:"homepageCtrl as vm"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("homepage.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function homepageCtrl(userApi,parseApi,$location){var vm=this;vm.loading=!1,vm.limit=20,vm.skip=0,userApi.currentUser().then(function(response){vm.userId=response.objectId,vm.username=response.username,parseApi.getFollowing(vm.userId).then(function(response){angular.forEach(response.data.results,function(data){vm.getFollowingPosts("Posts",data.follows.objectId,vm.limit,vm.skip)})})}),vm.uploadFile=function(files){vm.loading=!0,parseApi.uploadFile(files).then(function(response){console.log(files),vm.fileName=response.data.name,vm.fileUrl=response.data.url,vm.loading=!1},function(error){console.log(error)})},vm.post=function(userId,username,title,content){vm.userPointer={__type:"Pointer",className:"_User",objectId:userId},vm.username=username,vm.title=title,vm.content=content,vm.file={__type:"File",name:vm.fileName,url:vm.fileUrl},vm.loading?vm.errorMessage="please wait till the file has finished loading":void 0===vm.title||void 0===vm.content?vm.errorMessage="please finish off the post!":vm.fileUrl?parseApi.create("Posts",{user:vm.userPointer,username:vm.username,title:vm.title,content:vm.content,file:vm.file}).then(function(response){vm.newPostId=response.data.objectId,$location.path("/posts/"+vm.newPostId)},function(error){vm.errorMessage=error}):vm.errorMessage="please upload an audio file with your post"},vm.getFollowingPosts=function(className,followId,limit,skip){parseApi.getWhereUser(className,followId,limit,skip).then(function(result){vm.count=result.data.count,vm.posts=result.data.results,vm.postList=[],vm.count>vm.limit&&vm.count%vm.limit===0&&(vm.pages=vm.count/vm.limit),vm.count>vm.limit&&vm.count%vm.limit>0&&(vm.modulo=vm.count%vm.limit,vm.pages=(vm.count-vm.modulo)/vm.limit+1),(vm.count<vm.limit||vm.count===vm.limit)&&(vm.pages=1),angular.forEach(result.data.results,function(post){parseApi.getUser(post.user.objectId).then(function(response){vm.user=response.data,vm.postList.push({postTitle:post.title,postContent:post.content,postFile:post.file,postId:post.objectId,createdAt:post.createdAt,username:vm.user.username,userId:vm.user.objectId,userPictureUrl:vm.user.picture.url})})})})},vm.next=function(){vm.skip+vm.limit<vm.count&&(vm.skip+=vm.limit,parseApi.getFollowing(vm.userId).then(function(response){angular.forEach(response.data.results,function(data){vm.getFollowingPosts("Posts",data.follows.objectId,vm.limit,vm.skip)})}))},vm.previous=function(){vm.skip>0&&(vm.skip-=vm.limit,parseApi.getFollowing(vm.userId).then(function(response){angular.forEach(response.data.results,function(data){vm.getFollowingPosts("Posts",data.follows.objectId,vm.limit,vm.skip)})}))},vm.numberToArray=function(num){return new Array(num)},vm.jumpToPage=function(pageNumber){vm.skip!==vm.limit*(pageNumber-1)&&(vm.skip=vm.limit*(pageNumber-1),parseApi.getFollowing(vm.userId).then(function(response){angular.forEach(response.data.results,function(data){vm.getFollowingPosts("Posts",data.follows.objectId,vm.limit,vm.skip)})}))}}angular.module("homepage.module").controller("homepageCtrl",homepageCtrl),homepageCtrl.$inject=["userApi","parseApi","$location"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.messages",{url:"/messages",views:{"@":{templateUrl:"src/app/messages/messages.tpl.html",controller:"messageCtrl as messageCtrl"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("messages.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function messageCtrl(parseApi,userApi,$log){var vm=this;vm.messagingList=[],vm.linkList=[],vm.newThing=[],userApi.currentUser().then(function(response){vm.userId=response.objectId,parseApi.getMessages(vm.userId).then(function(response){vm.messages=response.data.results,angular.forEach(response.data.results,function(messaging){messaging.user1.objectId===vm.userId?parseApi.getUser(messaging.user2.objectId).then(function(response){parseApi.getMessagesFrom(messaging.objectId).then(function(message){vm.pictureStyle={background:"url("+response.data.picture.url+") no-repeat center center / cover"},vm.newThing.push({username:response.data.username,messageId:messaging.objectId,updatedAt:messaging.updatedAt,userPicture:response.data.picture.url,pictureStyle:vm.pictureStyle,newestMessage:message.data.results[0]})})}):parseApi.getUser(messaging.user1.objectId).then(function(response){parseApi.getMessagesFrom(messaging.objectId).then(function(message){vm.pictureStyle={background:"url("+response.data.picture.url+") no-repeat center center / cover"},vm.newThing.push({username:response.data.username,messageId:messaging.objectId,updatedAt:messaging.updatedAt,userPicture:response.data.picture.url,pictureStyle:vm.pictureStyle,newestMessage:message.data.results[0]})})})})})},function(error){console.log(error)})}angular.module("messages.module").controller("messageCtrl",messageCtrl),messageCtrl.$inject=["parseApi","userApi","$log"]}(),function(){"use strict";function config($stateProvider){function authentication($q,userApi){return userApi.currentUser()?$q.resolve({authenticated:!0}):$q.reject({authenticated:!1})}$stateProvider.state("root.message-detail",{url:"/messages/:messageId",views:{"@":{templateUrl:"src/app/message-detail/message-detail.tpl.html",controller:"messageDetailCtrl as vm"}},resolve:{auth:authentication}}),authentication.$inject=["$q","userApi"]}angular.module("message-detail.module",["common.services.api"]).config(config),config.$inject=["$stateProvider"]}(),function(){"use strict";function messageDetailCtrl($stateParams,parseApi,userApi,$log,$scope,$window,$location){""===$stateParams.messageId&&$location.path("/home");var vm=this;vm.messageList=[],vm.originalLimit=10,vm.skip=0,userApi.currentUser().then(function(response){vm.userId=response.objectId,vm.username=response.username,parseApi.getMessagesBetween($stateParams.messageId).then(function(response){vm.getOtherUser(response.data.user1.objectId===vm.userId?response.data.user2.objectId:response.data.user1.objectId)}),$window.scrollTo(0,document.body.scrollHeight)}),vm.getMessagesFrom=function(messageId,limit,skip){parseApi.getMessagesFrom(messageId,limit,skip).then(function(result){vm.data=result.data.results,angular.forEach(result.data.results,function(message){parseApi.getUser(message.user.objectId).then(function(response){message.user.objectId===vm.userId?(vm.ngMessageStyle={"float":"right"},vm.ngMessageBubbleStyle={background:"#3AC0EC",border:"#3AC0EC solid 3px"},vm.messageBubbleBool=!0,vm.pictureStyle={background:"url("+response.data.picture.url+") no-repeat center center / cover"}):(vm.ngMessageStyle={"float":"left"},vm.ngMessageBubbleStyle={background:"#C6C7C7",border:"#C6C7C7 solid 3px"},vm.messageBubbleBool=!1,vm.pictureStyle={background:"url("+response.data.picture.url+") no-repeat center center / cover"}),vm.messageList.push({messageUserId:message.user.objectId,messageUsername:response.data.username,messageContent:message.content,messageCreatedAt:message.createdAt,messageId:message.objectId,messagePicture:response.data.picture.url,messageStyle:vm.ngMessageStyle,messageBubbleStyle:vm.ngMessageBubbleStyle,messageSender:vm.messageBubbleBool,pictureStyle:vm.pictureStyle})})})},function(error){$log.debug("Error occurred"),vm.errorMessage=error.message})},vm.getMessagesFrom($stateParams.messageId,vm.originalLimit,vm.skip),vm.getOtherUser=function(userId){parseApi.getUser(userId).then(function(response){vm.otherUser=response.data})},vm.getOlderMessages=function(){vm.skip+=vm.originalLimit,vm.getMessagesFrom($stateParams.messageId,vm.originalLimit,vm.skip)},vm.sendMessage=function(userId,message){vm.userData={__type:"Pointer",className:"_User",objectId:userId},vm.messageData={__type:"Pointer",className:"Messaging",objectId:$stateParams.messageId},vm.newDate=new Date,parseApi.create("Messages",{user:vm.userData,message:vm.messageData,content:message}).then(function(response){vm.skip+=1,parseApi.edit("Messaging",$stateParams.messageId,{updatedAt:vm.newDate}).then(function(response){}),$("#message-text").val(""),vm.getNewMessage(response.data.objectId)})},vm.getNewMessage=function(messageId){parseApi.get("Messages/"+messageId).then(function(message){parseApi.getUser(message.data.user.objectId).then(function(response){vm.ngMessageStyle={"float":"right"},vm.ngMessageBubbleStyle={background:"#3AC0EC",border:"#3AC0EC solid 3px"},vm.messageBubbleBool=!0,vm.pictureStyle={background:"url("+response.data.picture.url+") no-repeat center center / cover"},vm.messageList.push({messageUserId:message.data.user.objectId,messageUsername:response.data.username,messageContent:message.data.content,messageCreatedAt:message.data.createdAt,messageId:message.data.objectId,messagePicture:response.data.picture.url,messageStyle:vm.ngMessageStyle,messageBubbleStyle:vm.ngMessageBubbleStyle,messageSender:vm.messageBubbleBool,pictureStyle:vm.pictureStyle})})})}}angular.module("message-detail.module").controller("messageDetailCtrl",messageDetailCtrl),messageDetailCtrl.$inject=["$stateParams","parseApi","userApi","$log","$scope","$window","$location"]}(),function(){"use strict";function versionDirective(version){return{restrict:"A",link:function(scope,elm,attrs){elm.text(version)}}}angular.module("common.directives.version",[]).directive("appVersion",versionDirective),versionDirective.$inject=["version"]}(),function(){"use strict";function followersDirective(){return{restrict:"E",transclude:!0,replace:!0,template:'<a href="#/user/{{followerUserId}}">{{followerUsername}}</a>',scope:{src:"@"},controller:["$scope","parseApi",function($scope,parseApi){parseApi.getUser($scope.src).then(function(result){$scope.followerUsername=result.data.username,$scope.followerUserId=result.data.objectId})}]}}angular.module("common.directives.followers",[]).directive("followersDirective",followersDirective)}(),function(){"use strict";function loginForm(){return{restrict:"E",templateUrl:"src/app/login/login.tpl.html"}}angular.module("login.module").directive("loginForm",loginForm)}(),function(){"use strict";function signupForm(){return{restrict:"E",templateUrl:"src/app/signup/signup.tpl.html"}}angular.module("signup.module").directive("signupForm",signupForm)}(),function(){"use strict";function fileUpload($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileUpload),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}
}}angular.module("new-post.module").directive("fileUpload",fileUpload),fileUpload.$inject=["$parse"]}(),function(){"use strict";function posts(){return{restrict:"E",templateUrl:"src/app/posts/posts.tpl.html",templateCtrl:"src/app/posts/posts.controller.js"}}angular.module("common.directives.post",[]).directive("posts",posts)}(),function(){"use strict";angular.module("common.directives.ngEnter",[]).directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown",function(e){13===e.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter,{e:e})}),e.preventDefault())})}})}(),function(){"use strict";function newPostForm(){return{restrict:"E",templateUrl:"src/app/new-post/new-post.tpl.html",templateCtrl:"src/app/new-post/new-post.controller.js"}}angular.module("homepage.module").directive("newPostForm",newPostForm)}(),function(){"use strict";function httpInterceptor($q,$log){return{request:function(config){return config},requestError:function(rejection){return $log.debug(rejection),$q.reject(rejection)},response:function(response){return $log.debug("response: ",response),response},responseError:function(rejection){return $log.debug(rejection),$q.reject(rejection)}}}httpInterceptor.$inject=["$q","$log"],angular.module("common.interceptors.http",[]).factory("httpInterceptor",httpInterceptor)}(),function(){"use strict";angular.module("common.services.api",["ngCookies"]).constant("PARSE_CREDENTIALS",{APP_ID:"eor63afSo5K3tMSMrITY76E6IPVcerPATtJhmpNo",REST_API_KEY:"426tpWnUZiO2g4ZoQqww4tuDhJxALhF5UtOVNafe"}).constant("PARSE_URLS",{LOGIN:"https://api.parse.com/1/login",SIGNUP:"https://api.parse.com/1/users",LOGOUT:"https://api.parse.com/1/logout",CURRENT_USER:"https://api.parse.com/1/users/me",USERS:"https://api.parse.com/1/classes/_User",SESSION:"https://api.parse.com/1/classes/_Session",CLASSES:"https://api.parse.com/1/classes/",FILES:"https://api.parse.com/1/files"})}(),function(){"use strict";function dataService(){return{get:function(){return["some","data"]}}}angular.module("common.services.data",[]).factory("DataService",dataService)}(),function(){"use strict";function parseApi($http,PARSE_CREDENTIALS,PARSE_URLS,$cookies){var service={};return service.getAll=function(chosenClass,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+chosenClass,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{limit:limit,skip:skip,order:"-createdAt",count:1}})},service.get=function(chosenClass,id){return $http.get(PARSE_URLS.CLASSES+chosenClass+"/"+id,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY}})},service.getWhereUser=function(chosenClass,userId,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+chosenClass,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{user:{__type:"Pointer",className:"_User",objectId:userId}},limit:limit,skip:skip,order:"-createdAt",count:1}})},service.getWherePost=function(postId,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+"PostComments",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{post:{__type:"Pointer",className:"Posts",objectId:postId}},limit:limit,skip:skip,count:1}})},service.getMessages=function(userId,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+"Messaging",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{$or:[{user1:{__type:"Pointer",className:"_User",objectId:userId}},{user2:{__type:"Pointer",className:"_User",objectId:userId}}]},limit:limit,skip:skip,count:1}})},service.getMessagesBetween=function(messageId,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+"Messaging/"+messageId,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{limit:limit,skip:skip,count:1}})},service.getMessagesFrom=function(messageId,limit,skip){return limit="undefined"==typeof limit?10:limit,skip="undefined"==typeof skip?0:skip,$http.get(PARSE_URLS.CLASSES+"Messages",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{message:{__type:"Pointer",className:"Messaging",objectId:messageId}},limit:limit,skip:skip,count:1,order:"-createdAt"}})},service.getUser=function(id){return $http.get(PARSE_URLS.CLASSES+"_User/"+id,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY}})},service.getFollowing=function(id){return $http.get(PARSE_URLS.CLASSES+"Following",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{user:{__type:"Pointer",className:"_User",objectId:id}},count:1}})},service.follows=function(userId,followId){return $http.get(PARSE_URLS.CLASSES+"Following",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{user:{__type:"Pointer",className:"_User",objectId:userId},follows:{__type:"Pointer",className:"_User",objectId:followId}}}})},service.getFollowers=function(id){return $http.get(PARSE_URLS.CLASSES+"Following",{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{follows:{__type:"Pointer",className:"_User",objectId:id}},count:1}})},service.create=function(chosenClass,data){return $http.post(PARSE_URLS.CLASSES+chosenClass,data,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"application/json"}})},service.uploadFile=function(files){return $http.post(PARSE_URLS.FILES+"/"+files[0].name,files[0],{withCredentials:!1,headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"audio/*"},transformRequest:angular.identity})},service.follow=function(userId,followId){return $http.post(PARSE_URLS.CLASSES+"Following",{user:{__type:"Pointer",className:"_User",objectId:userId},follows:{__type:"Pointer",className:"_User",objectId:followId}},{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"application/json"}})},service.edit=function(chosenClass,id,data){return $http.put(PARSE_URLS.CLASSES+chosenClass+"/"+id,data,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"application/json"}})},service.remove=function(chosenClass,id){return $http["delete"](PARSE_URLS.CLASSES+chosenClass+"/"+id,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"application/json"}})},service}angular.module("common.services.api").factory("parseApi",parseApi),parseApi.$inject=["$http","PARSE_CREDENTIALS","PARSE_URLS","$cookies"]}(),function(){"use strict";function userApi($log,$q,$http,$cookies,PARSE_CREDENTIALS,PARSE_URLS){var service={};return service.isLoggedIn=function(){return void 0!==$cookies.get("_sessionToken")},service.getSession=function(){var deferred=$q.defer(),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"X-Parse-Session-Token":$cookies.get("_sessionToken")},params:{where:{user:{__type:"Pointer",className:"_User",objectId:$cookies.get("_userId")}}}};return $http.get(PARSE_URLS.SESSION,config).then(function(response){return deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service.revokeSession=function(sessionId){var deferred=$q.defer(),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"X-Parse-Session-Token":$cookies.get("_sessionToken")}};return $http["delete"](PARSE_URLS.SESSION+"/"+sessionId,config).then(function(response){return deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service.isUser=function(username){var deferred=$q.defer(),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{where:{username:username}}};return $http.get(PARSE_URLS.USERS,config).then(function(response){return deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service.signUp=function(username,password,email){var deferred=$q.defer(),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"Content-Type":"application/json"}};return $http.post(PARSE_URLS.SIGNUP,{username:username,password:password,email:email},config).then(function(response){var sessionToken=response.data.sessionToken,userId=response.data.objectId,expireDate=new Date;return expireDate.setFullYear(expireDate.getFullYear()+1),$cookies.put("_sessionToken",sessionToken,{expires:expireDate}),$cookies.put("_userId",userId,{expires:expireDate}),deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service.logIn=function(username,password){var deferred=$q.defer(),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY},params:{username:username,password:password}};return $http.get(PARSE_URLS.LOGIN,config).then(function(response){$log.debug("Logged In As:",response.data.username);var sessionToken=response.data.sessionToken,userId=response.data.objectId,expireDate=new Date;return expireDate.setFullYear(expireDate.getFullYear()+1),$cookies.put("_sessionToken",sessionToken,{expires:expireDate}),$cookies.put("_userId",userId,{expires:expireDate}),deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service.logOut=function(){var deferred=$q.defer(),sessionToken=$cookies.get("_sessionToken"),emptyData={},headers={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"X-Parse-Session-Token":sessionToken}};return $http.post(PARSE_URLS.LOGOUT,emptyData,headers).then(function(response){return $cookies.remove("_sessionToken"),$cookies.remove("_userId"),deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"An error occurred"})}),deferred.promise},service.currentUser=function(){var deferred=$q.defer(),sessionToken=$cookies.get("_sessionToken");return void 0!==sessionToken?($http.get(PARSE_URLS.CURRENT_USER,{headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"X-Parse-Session-Token":sessionToken}}).then(function(response){return deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"An error occurred"})}),deferred.promise):!1},service.editUser=function(userId,data){var deferred=$q.defer(),sessionToken=$cookies.get("_sessionToken"),config={headers:{"X-Parse-Application-Id":PARSE_CREDENTIALS.APP_ID,"X-Parse-REST-API-Key":PARSE_CREDENTIALS.REST_API_KEY,"X-Parse-Session-Token":sessionToken}};return $http.put(PARSE_URLS.USERS+"/"+userId,data,config).then(function(response){return deferred.resolve(response.data)},function(error){return deferred.reject({status:error.status,message:"Invalid username or password"})}),deferred.promise},service}angular.module("common.services.api").factory("userApi",userApi),userApi.$inject=["$log","$q","$http","$cookies","PARSE_CREDENTIALS","PARSE_URLS"]}(),function(){"use strict";function uppercase(){return function(text){return text?text.toUpperCase():text}}angular.module("common.filters.uppercase",[]).filter("uppercase",uppercase)}(),function(){"use strict";angular.module("common.filters.truncate",[]).filter("characters",function(){return function(input,chars,breakOnWord){if(isNaN(chars))return input;if(0>=chars)return"";if(input&&input.length>chars){if(input=input.substring(0,chars),breakOnWord)for(;" "===input.charAt(input.length-1);)input=input.substr(0,input.length-1);else{var lastspace=input.lastIndexOf(" ");-1!==lastspace&&(input=input.substr(0,lastspace))}return input+"…"}return input}}).filter("splitcharacters",function(){return function(input,chars){if(isNaN(chars))return input;if(0>=chars)return"";if(input&&input.length>chars){var prefix=input.substring(0,chars/2),postfix=input.substring(input.length-chars/2,input.length);return prefix+"..."+postfix}return input}}).filter("words",function(){return function(input,words){if(isNaN(words))return input;if(0>=words)return"";if(input){var inputWords=input.split(/\s+/);inputWords.length>words&&(input=inputWords.slice(0,words).join(" ")+"…")}return input}})}(),function(){"use strict";function headerCtrl($log,$cookies,$location,userApi,$window){$log.debug("Header loaded");var vm=this;vm.userId=$cookies.get("_userId"),vm.getClass=function(path){return $location.path().substr(0,path.length)===path},userApi.currentUser()&&(vm.getProfile=function(path){return $location.path().substr(path.length,vm.userId.length)===vm.userId},vm.isLoggedIn=!0),vm.logOut=function(){console.log("LOGGIN OUT"),userApi.isLoggedIn()?(vm.errorMessage="",userApi.logOut().then(function(response){$log.debug("loginCtrl logout success"),$location.path("/"),$window.location.reload()},function(error){$log.debug("loginCtrl logout failed"),vm.errorMessage=error.message})):vm.errorMessage="No user logged in!"}}headerCtrl.$inject=["$log","$cookies","$location","userApi","$window"],angular.module("common.header",["ngCookies"]).controller("HeaderCtrl",headerCtrl)}(),function(){"use strict";function footerCtrl($log){$log.debug("Footer loaded")}footerCtrl.$inject=["$log"],angular.module("common.footer",[]).controller("FooterCtrl",footerCtrl).directive("contactButtons",function(){return{restrict:"E",templateUrl:"src/app/partials/buttons.tpl.html"}})}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/common/footer.tpl.html",'<div class="pure-g">\n  <div class="pure-u-1 text-center">\n    <p style="display:inline-block;">&copy; 2016 - <a target="_blank" href="http://thebeardydeveloper.com">David Thompson</a>\n    <ul class="hlist" style="display:inline-block;">\n      <li><a target="_blank" href="https://twitter.com/ysdexlic">twitter</a>\n      </li>\n      <li><a target="_blank" href="https://uk.linkedin.com/pub/david-thompson/109/163/540">LinkedIn</a>\n      </li>\n      <li><a target="_blank" href="https://github.com/ysdexlic/">GitHub</a>\n      </li>\n    </ul>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/common/header.tpl.html",'<div id="header" class="pure-menu pure-menu-open pure-menu-horizontal text-center">\n  <ul>\n    <li data-ng-show="HeaderCtrl.isLoggedIn" class="pure-menu-item" data-ng-class="{ \'active-menu\' : HeaderCtrl.getClass(\'/home\') }">\n      <a href data-ui-sref="root.homepage">{{ \'Home\' | uppercase }}</a>\n    </li>\n    <li data-ng-show="HeaderCtrl.isLoggedIn" class="pure-menu-item" data-ng-class="{ \'active-menu\' : HeaderCtrl.getProfile(\'/user/\') }">\n      <a data-ui-sref="root.other-users-profiles({userId: HeaderCtrl.userId})">{{ \'Profile\' | uppercase }}</a>\n    </li>\n    <li data-ng-show="HeaderCtrl.isLoggedIn" class="pure-menu-item" data-ng-class="{ \'active-menu\' : HeaderCtrl.getClass(\'/posts\') }">\n      <a href data-ui-sref="root.posts">{{ \'Posts\' | uppercase }}</a>\n    </li>\n    <li data-ng-show="HeaderCtrl.isLoggedIn" class="pure-menu-item" data-ng-class="{ \'active-menu\' : HeaderCtrl.getClass(\'/messages\') }">\n      <a href data-ui-sref="root.messages">{{ \'Messages\' | uppercase }}</a>\n    </li>\n  </ul>\n  <ul data-ng-show="HeaderCtrl.isLoggedIn" style="float:right;">\n    <li class="pure-menu-item">\n      <a href data-ng-click="HeaderCtrl.logOut()">{{ \'Log Out\' }}</a>\n    </li>\n  </ul>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/follows/followers.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1">\n    <h1>{{ vm.count }} people following <a href="#/user/{{vm.id}}">{{ vm.username }}</a></h1>\n  </div>\n\n  <div class="pure-u-lg-1-3 pure-u-md-1-2 pure-u-1 single-post" ng-repeat="followers in vm.followerList">\n    <a class="post-card" href="#/user/{{followers.followerUserId}}">\n      <div class="top-row">\n        <div class="picture-box" data-ng-style="{{vm.pictureStyle}}">\n        </div>\n        <div class="post-top-text">\n          <h4>{{followers.followerUsername}}</h4>\n          <p>{{followers.followerUserInstrument}}</p>\n        </div>\n      </div>\n      <div class="bottom-row">\n        <p>{{followers.followerUserBio | characters:140}}</p>\n      </div>\n    </a>\n  </div>\n</div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/follows/following.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1">\n    <h1><a href="#/user/{{vm.id}}">{{ vm.username }}</a> is following {{ vm.count }} people</h1>\n  </div>\n    <div class="pure-u-lg-1-3 pure-u-md-1-2 pure-u-1 single-post" ng-repeat="following in vm.followingList">\n      <a class="post-card" href="#/user/{{following.followingUserId}}">\n        <div class="top-row">\n          <div class="picture-box" data-ng-style="{{vm.pictureStyle}}">\n          </div>\n          <div class="post-top-text">\n            <h4>{{following.followingUsername}}</h4>\n            <p>{{following.followingUserInstrument}}</p>\n          </div>\n        </div>\n        <div class="bottom-row">\n          <p>{{following.followingUserBio | characters:140}}</p>\n        </div>\n      </a>\n    </div>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/home/home.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1 pure-u-lg-1-2 pure-u-md-1-2">\n    <login-form></login-form>\n  </div>\n  <div class="pure-u-1 pure-u-lg-1-2 pure-u-md-1-2">\n    <signup-form></signup-form>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/homepage/homepage.tpl.html",'<div class="pure-g text-center">\n  <div class="pure-u-1 posting-form">\n    <new-post-form></new-post-form>\n    <p style="color:red">{{vm.errorMessage}}</p>\n  </div>\n  <div class="pure-u-lg-1-3 pure-u-md-1-2 pure-u-1 single-post" ng-repeat="post in vm.postList | orderBy:\'-createdAt\' | limitTo: 20">\n    <a class="post-card" ui-sref="root.post-detail({postId: post.postId})">\n      <div class="top-row">\n        <div class="picture-box">\n          <img class="user-picture" ng-src="{{post.userPictureUrl}}">\n        </div>\n        <div class="post-top-text">\n          <h4>{{post.username}}</h4>\n          <p>{{post.postTitle}}</p>\n        </div>\n      </div>\n      <div class="bottom-row">\n        <p>{{post.postContent | characters:90}}</p>\n      </div>\n    </a>\n  </div>\n  <div class="pure-u-1 island">\n    <a href class="next-buttons" ng-click="vm.previous()">&#x2190;</a>\n    <a href ng-repeat="i in vm.numberToArray(vm.pages) track by $index" ng-click="vm.jumpToPage($index+1)" style="display: inline-block; padding: 10px;">{{$index + 1}}</a>\n    <a href class="next-buttons" ng-click="vm.next()">&#x2192;</a>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/login/login.tpl.html",'<form name="loginForm" class="pure-form pure-form-stacked" data-ng-controller="LoginCtrl as vm"\n      data-ng-submit="vm.logIn(vm.login.username, vm.login.password)" novalidate>\n  <fieldset class="text-center">\n    <legend>Log In</legend>\n      <input type="text" placeholder="Username" style="display:inline-block;" data-ng-model="vm.login.username" required>\n      <br/>\n      <input type="password" placeholder="Password" style="display:inline-block;" data-ng-model="vm.login.password" required>\n      <br/>\n      <a href="">Forgotten your password?</a>\n      <br/>\n      <button type="submit" class="pure-button pure-button-primary">Log In</button>\n  </fieldset>\n\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/message-detail/message-detail.tpl.html",'<div class="pure-g text-center" style="background: lightgray">\n  <div class="large-container">\n    <div class="pure-u-1">\n      <h1>{{vm.otherUser.username}}</h1>\n    </div>\n\n    <div class="pure-u-1">\n      <form id="message-send-form" class="pure-form pure-form-stacked" data-ng-submit="vm.sendMessage(vm.userId, vm.message)" novalidate>\n        <fieldset class="text-center" style="height: 100px;">\n          <textarea ng-enter="vm.sendMessage(vm.userId, vm.message)" id="message-text" placeholder="Type a message... (press enter to send)" data-ng-model="vm.message"></textarea>\n          <input type="submit" value="send" class="pure-button pure-button-primary" style="height:100%;">\n        </fieldset>\n      </form>\n    </div>\n\n\n    <div class="pure-u-1" ng-repeat="message in vm.messageList | orderBy:\'-messageCreatedAt\'">\n      <div class="message-line">\n        <div class="messages-container" ng-style="{{message.messageStyle}}">\n          <a ui-sref="root.other-users-profiles({userId:message.messageUserId})" ng-hide="message.messageSender" class="message-picture" ng-style="{{vm.pictureStyle}}"></a>\n          <div ng-class="message.messageSender? \'bubble1\' : \'bubble2\'">\n            <p>{{message.messageContent}}</p>\n          </div>\n          <a ui-sref="root.other-users-profiles({userId:message.messageUserId})" ng-show="message.messageSender" class="message-picture" ng-style="{{vm.pictureStyle}}"></a>\n          <p style="color:gray; font-size: 0.6em;">{{message.messageCreatedAt | date:"dd MMM yyyy"}}</p>\n        </div>\n      </div>\n    </div>\n\n    <div class="pure-u-1 island">\n      <a href ng-click="vm.getOlderMessages()">Load older messages</a>\n    </div>\n\n  </div>\n\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/messages/messages.tpl.html",'<div class="pure-g margin-island text-center all-messages">\n  <div class="pure-u-1 single-message" ng-repeat="message in messageCtrl.newThing | orderBy:\'-updatedAt\'">\n    <a class="message-card" ui-sref="root.message-detail({messageId: message.messageId})">\n      <div class="message-picture-box" ng-style="{{message.pictureStyle}}"></div>\n        <div class="message-top-row">\n        <div class="message-user-info">\n          <div class="message-username">\n            {{message.username}}\n          </div>\n        </div>\n        <div class="message-info">\n          <div class="message-username">\n            {{message.updatedAt | date:"dd MMM yyyy"}}\n          </div>\n        </div>\n      </div>\n      <div class="message-bottom-row">\n        <div class="message-content-snippet">\n          {{message.newestMessage.content | characters: 20}}\n        </div>\n\n      </div>\n\n    </a>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/new-post/new-post.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1">\n    <form class="pure-form pure-form-stacked" data-ng-submit="vm.post(vm.userId, vm.username, vm.title, vm.content)" novalidate>\n      <fieldset class="text-center" >\n        <input type="text" placeholder="Title" data-ng-model="vm.title" style="width:30%; margin:auto;" required>\n        <textarea placeholder="Write about what you\'re posting...." data-ng-model="vm.content" style="width:30%; height:100px; margin:10px auto;" required></textarea>\n        <input id="file-upload" type="file" name="file" accept="audio/*" onchange="angular.element(this).controller().uploadFile(this.files)" required>\n        <label for="file-upload">Upload File</label>\n        <div ng-show="vm.loading" style="display: inline-block; vertical-align: middle;">\n          <div class="spinner">\n            <div class="bounce1"></div>\n            <div class="bounce2"></div>\n            <div class="bounce3"></div>\n          </div>\n          <div>\n            <p style="margin:0;">Loading</p>\n          </div>\n        </div>\n      </fieldset>\n      <div style="display: inline-block; height:100%;">\n        <button id="send-post" type="submit" class="pure-button pure-button-primary">Post</button>\n      </div>\n    </form>\n\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/other-users-profiles/other-users-profiles.tpl.html",'<div class="pure-g text-center">\n  <div class="pure-u-1">\n    <div class="profile-header island">\n      <div class="profile-picture island">\n        <img data-ng-src="{{vm.picture}}" style="width: 200px;"/>\n        <div data-ng-show="vm.isCurrentUser">\n          <input type="file" name="file" id="profile-picture-upload" accept="image/*" onchange="angular.element(this).scope().uploadFile(this.files)">\n          <label for="profile-picture-upload">Change Picture</label>\n        </div>\n      </div>\n      <div class="profile-info">\n        <h1>{{vm.username}}</h1>\n        <h3>{{vm.data.instrument}} <a href data-ng-click="vm.editInstrument()" data-ng-show="vm.isCurrentUser">{{vm.instrumentEditString}}</a></h3>\n        <form data-ng-show="vm.editingInstrument" class="pure-form pure-form-stacked" data-ng-submit="vm.createNewInstrument(vm.newInstrument)" novalidate>\n          <fieldset class="text-center" style="height: 50px;">\n            <textarea ng-enter="vm.createNewInstrument(vm.newInstrument)" id="instrument-text" placeholder="What instrument do you play?" data-ng-model="vm.newInstrument"></textarea>\n            <input type="submit" value="save" class="pure-button pure-button-primary" style="height:100%;">\n          </fieldset>\n        </form>\n        <p>{{vm.data.bio}} <a href data-ng-click="vm.editBio()" data-ng-show="vm.isCurrentUser">{{vm.bioEditString}}</a></p>\n        <form data-ng-show="vm.editingBio" class="pure-form pure-form-stacked" data-ng-submit="vm.createNewBio(vm.newBio)" novalidate>\n          <fieldset class="text-center" style="height: 100px;">\n            <textarea ng-enter="vm.createNewBio(vm.newBio)" id="bio-text" placeholder="Change your bio" data-ng-model="vm.newBio"></textarea>\n            <input type="submit" value="save" class="pure-button pure-button-primary" style="height:100%;">\n          </fieldset>\n        </form>\n      </div>\n      <div class="messaging" data-ng-hide="vm.isCurrentUser">\n        <a class="messagemessage-button" href data-ng-click="vm.message()">Send Message</a>\n      </div>\n      <div class="follow" data-ng-hide="vm.isCurrentUser">\n        <a class="message-button" href data-ng-click="vm.follow()">{{vm.followString}}</a>\n      </div>\n      <div class="following">\n        <a class="mini-button" href="#/user/{{vm.id}}/following"><p style="margin:0;">Following</p><p style="margin:0;">{{ vm.followingNumber }}</p></a>\n        <a class="mini-button" href="#/user/{{vm.id}}/followers"><p style="margin:0;">Followers</p><p style="margin:0;">{{ vm.followerNumber }}</p></a>\n      </div>\n    </div>\n  </div>\n  <div class="pure-u-lg-1-3 pure-u-md-1-2 pure-u-1 single-post" data-ng-repeat="post in vm.postList | orderBy:\'-createdAt\' | filter:searchBox">\n    <a class="post-card" href="#/posts/{{post.postId}}">\n      <div class="top-row">\n        <div class="picture-box" data-ng-style="{{vm.pictureStyle}}">\n        </div>\n        <div class="post-top-text">\n          <h4>{{post.username}}</h4>\n          <p>{{post.postTitle}}</p>\n        </div>\n      </div>\n      <div class="bottom-row">\n        <p>{{post.postContent | characters:140}}</p>\n      </div>\n    </a>\n  </div>\n  <div class="pure-u-1">\n    <a href class="next-buttons" ng-click="vm.previous()">&#x2190;</a>\n    <a href ng-repeat="i in vm.numberToArray(vm.pages) track by $index" ng-click="vm.jumpToPage($index+1)" style="display: inline-block; padding: 10px;">{{$index + 1}}</a>\n    <a href class="next-buttons" ng-click="vm.next()">&#x2192;</a>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/post-detail/post-detail.tpl.html",'<div class="pure-g text-center" style="background: lightgray">\n  <div class="large-container">\n    <div class="post-content-box">\n      <div class="pure-u-1">\n        <h1 style="margin-bottom: 0;"><a ui-sref="root.other-users-profiles({userId:postDetailCtrl.user})">{{postDetailCtrl.username}}</a></h1>\n      </div>\n      <div class="pure-u-1">\n        <h1 style="margin-bottom: 0;">{{postDetailCtrl.data.title}}</h1>\n        <p>{{postDetailCtrl.data.content}}</p>\n      </div>\n    </div>\n    <div class="pure-u-1 audio-row">\n      <div class="audio-player">\n        <h2><a class="audio-link" href="{{postDetailCtrl.audioUrl}}" target="_blank">{{postDetailCtrl.shortAudioName}}</a></h2>\n        <audio id="audio-player" class="audio-file" controls="controls" ng-src="{{postDetailCtrl.audioUrl}}" type="audio/*"></audio>\n      </div>\n    </div>\n\n    <div class="pure-u-1">\n      <form class="pure-form pure-form-stacked" data-ng-submit="postDetailCtrl.writeComment(postDetailCtrl.comment)" novalidate>\n        <fieldset class="text-center" style="height: 100px;">\n          <textarea ng-enter="postDetailCtrl.writeComment(postDetailCtrl.comment)" id="message-text" placeholder="Make a comment... (press enter to send)" data-ng-model="postDetailCtrl.comment"></textarea>\n          <input type="submit" value="send" class="pure-button pure-button-primary" style="height:100%;">\n        </fieldset>\n      </form>\n    </div>\n\n    <div class="pure-u-1" ng-repeat="comments in postDetailCtrl.commentList | orderBy:\'-createdAt\'">\n      <div class="comment-box">\n        <div class="inner-comment-box">\n          <a ui-sref="root.other-users-profiles({userId:comments.commentUser.objectId})" class="post-detail-picture" ng-style="{{postDetailCtrl.pictureStyle}}"></a>\n          <div class="comment-content">\n            <div class="comment-username">\n              <a ui-sref="root.other-users-profiles({userId:comments.commentUser.objectId})">{{comments.commentUser.username}}</a>\n            </div>\n          </div>\n          <div class="comment">\n            <p>{{comments.commentContent}}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n');

}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/posts/posts.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1">\n    <input class="search-box" placeholder="Search" ng-model="searchBox">\n  </div>\n  <div class="pure-u-lg-1-3 pure-u-md-1-2 pure-u-1 single-post" ng-repeat="post in vm.postList | orderBy:\'-createdAt\' | filter:searchBox">\n    <a class="post-card" ui-sref="root.post-detail({postId: post.postId})">\n      <div class="top-row">\n        <div class="picture-box" ng-style="{{vm.pictureStyle}}">\n        </div>\n        <div class="post-top-text">\n          <h4>{{post.username}}</h4>\n          <p>{{post.postTitle}}</p>\n        </div>\n      </div>\n      <div class="bottom-row">\n        <p>{{post.postContent | characters:140}}</p>\n      </div>\n    </a>\n  </div>\n  <div class="pure-u-1">\n    <a href class="next-buttons" ng-click="vm.previous()" style="display: inline-block;">&#x2190;</a>\n    <a href ng-repeat="i in vm.numberToArray(vm.pages) track by $index" ng-click="vm.jumpToPage($index+1)" style="display: inline-block; padding: 10px;">{{$index + 1}}</a>\n    <a href class="next-buttons" ng-click="vm.next()" style="display: inline-block;">&#x2192;</a>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/signup/signup.tpl.html",'<form class="pure-form pure-form-stacked" data-ng-controller="SignupCtrl as vm"\n      data-ng-submit="vm.signUp(vm.signup.username, vm.signup.password, vm.signup.email)" novalidate>\n    <fieldset class="text-center">\n    	<legend>Sign Up</legend>\n        <input type="email" placeholder="Email" style="display:inline-block;" data-ng-model="vm.signup.email" required><br/>\n        <input type="text" placeholder="Username" style="display:inline-block;" data-ng-model="vm.signup.username" required><br/>\n        <input type="password" placeholder="Password" style="display:inline-block;" data-ng-model="vm.signup.password" required><br/>\n		    <input type="password" placeholder="Confirm Password" style="display:inline-block;" data-ng-model="vm.signup.confirmPassword" required><br/>\n        <button type="submit" class="pure-button pure-button-primary">Sign Up</button>\n    </fieldset>\n  <p style="color:red">\n    {{vm.errorMessage}}\n  </p>\n</form>\n\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/user-profile/profile.tpl.html",'<div class="pure-g island text-center">\n  <div class="pure-u-1">\n    <h1>{{profileCtrl.username}}</h1>\n    <h3>{{profileCtrl.data.instrument}}</h3>\n    <img ng-src="{{profileCtrl.picture}}" style="width: 200px;"/>\n    <br/>\n    <input type="file" name="file" accept="image/*" onchange="angular.element(this).scope().uploadFile(this.files)">\n    <br/>\n    <a href="#/user/{{profileCtrl.id}}/following">Following ({{ profileCtrl.followingNumber }})</a>\n    <br/>\n    <a href="#/user/{{profileCtrl.id}}/followers">Followers ({{ profileCtrl.followerNumber }})</a>\n  </div>\n</div>\n')}])}();
//# sourceMappingURL=data:application/json;base64,